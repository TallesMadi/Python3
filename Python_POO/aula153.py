# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod


class Notificacao(ABC):
    def __init__(self, mensagem) -> None:
        self.mensagem = mensagem

    @abstractmethod
    def enviar(self) -> bool: ...

class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        print(f'E-mail: {self.mensagem}')
        return True

class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        print(f'SMS: {self.mensagem}')
        return True
    
def notificar(notificacao: Notificacao) -> str:
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o n√£o enviada')

n1 = NotificacaoEmail('A pizza chegou!')
n2 = NotificacaoSMS('A pizza foi embora!')

notificar(n1)
notificar(n2)